# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: "transform_with_dbt"
version: "1.0.0"
config-version: 2

# This setting configures which "profile" dbt uses for this project.
#profile: "duckdb_data_store"
profile: 'hybrid_compute_databricks_duckdb'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["data-tests"]
seed-paths: ["seeds", "jaffle-data"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

clean-targets: # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"

vars:
  "dbt_date:time_zone": "Europe/Paris"

seeds:
  +enabled: true
  +database: "{{ env_var('LANDING_CATALOG_NAME') }}{{ env_var('LANDING_DEPLOYMENT_ENVIRONMENT_SUFFIX', '') }}"
  +schema: "dbt_{{ env_var('DBT_USER') }}"


flags:
    send_anonymous_usage_stats: False
    require_explicit_package_overrides_for_builtin_materializations: false # required for elementary
  
snapshots:
  +file_format: delta


# on-run-end:
#   - "{% if target.name in ['databricks_u2m', 'databricks_u2m_cluster'] %}{% for schema in schemas %}ALTER SCHEMA {{ schema }} OWNER TO AnalyticsEngineeringTeam ; {% endfor %}{% endif %}"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/
# directory as views. These settings can be overridden in the individual model
# files using the `{{ config(...) }}` macro.
models:
  elementary:
    +database: "{{ env_var('LANDING_CATALOG_NAME') }}{{ env_var('LANDING_DEPLOYMENT_ENVIRONMENT_SUFFIX', '') }}"
    +schema: "elementary"
    enabled: "{{ target.schema in ['dbt_prod'] }}"

  transform_with_dbt:
    +file_format: delta
    +materialized: view

    bronze:
      seeds:
        +materialized: view

      sources:
        +materialized: "{{ 'table' if target.name in ['duckdb_cloud_sources', 'duckdb_local_sources']
                      else 'streaming_table' }}"
        +tags: ["sources"]

      sources_deduplicated:
        +materialized: "{{ 'table' if target.name in ['duckdb_cloud_sources', 'duckdb_local_sources']
                      else 'view' }}"
        +tags: ["sources_deduplicated"]
      
      raw:
        +materialized: "{{ 'view' if target.name in ['duckdb_cloud_sources', 'duckdb_local_sources']
                      else 'view' }}"
        +tags: ["raw"]

      +database: "{{ env_var('BRONZE_CATALOG_NAME') }}{{ env_var('BRONZE_DEPLOYMENT_ENVIRONMENT_SUFFIX', '') }}"
      
      +location_root: "abfss://{{ env_var('BRONZE_CONTAINER_NAME') }}{{ env_var('BRONZE_DEPLOYMENT_ENVIRONMENT_SUFFIX', '') }}@{{ env_var('DBT_ENV_AZURE_DATALAKE_STORAGE_ACCOUNT') }}.dfs.core.windows.net/dbt_{{ env_var('DBT_USER') }}"
      #+tblproperties:
      #  delta.autoOptimize.optimizeWrite: true
      #  delta.autoOptimize.autoCompact: true
      +tags: ["bronze"]
    

    silver:
      +materialized: "{{ 'view' if target.name in ['duckdb_cloud_sources', 'duckdb_local_sources'] 
                    else 'view' }}"
      
      +database: "{{ env_var('SILVER_CATALOG_NAME') }}{{ env_var('SILVER_DEPLOYMENT_ENVIRONMENT_SUFFIX', '') }}"

      +location_root: "abfss://{{ env_var('SILVER_CONTAINER_NAME') }}{{ env_var('SILVER_DEPLOYMENT_ENVIRONMENT_SUFFIX', '') }}@{{ env_var('DBT_ENV_AZURE_DATALAKE_STORAGE_ACCOUNT') }}.dfs.core.windows.net/dbt_{{ env_var('DBT_USER') }}"
      #+tblproperties:
      #  delta.autoOptimize.optimizeWrite: true
      #  delta.autoOptimize.autoCompact: true
      +tags: ["silver"]


    gold:
      +materialized: "{{ 'table' if target.name in ['duckdb_cloud_sources', 'duckdb_local_sources']
                    else 'table' }}"
      
      +database: "{{ env_var('GOLD_CATALOG_NAME') }}{{ env_var('GOLD_DEPLOYMENT_ENVIRONMENT_SUFFIX', '') }}"

      +location_root: "abfss://{{ env_var('GOLD_CONTAINER_NAME') }}{{ env_var('GOLD_DEPLOYMENT_ENVIRONMENT_SUFFIX', '') }}@{{ env_var('DBT_ENV_AZURE_DATALAKE_STORAGE_ACCOUNT') }}.dfs.core.windows.net/dbt_{{ env_var('DBT_USER') }}"
      
      # OLD as of 2025-03-12
      # +tblproperties:
      #   delta.autoOptimize.optimizeWrite: true
      #   delta.autoOptimize.autoCompact: true
      #   delta.enableIcebergCompatV2: true
      #   delta.universalFormat.enabledFormats: iceberg

      +tags: ["gold"]
      
    published:
      +materialized: "{{ 'table' if target.name in ['duckdb_cloud_sources', 'duckdb_local_sources']
                    else 'table' }}"
      
      +table_format: iceberg
      
      +database: "{{ env_var('PUBLISHED_CATALOG_NAME') }}{{ env_var('PUBLISHED_DEPLOYMENT_ENVIRONMENT_SUFFIX', '') }}"

      +location_root: "abfss://{{ env_var('PUBLISHED_CONTAINER_NAME') }}{{ env_var('PUBLISHED_DEPLOYMENT_ENVIRONMENT_SUFFIX', '') }}@{{ env_var('DBT_ENV_AZURE_DATALAKE_STORAGE_ACCOUNT') }}.dfs.core.windows.net/dbt_{{ env_var('DBT_USER') }}"
      
      # OLD as of 2025-03-12
      # +tblproperties:
      #   delta.autoOptimize.optimizeWrite: true
      #   delta.autoOptimize.autoCompact: true
      #   delta.enableIcebergCompatV2: true
      #   delta.universalFormat.enabledFormats: iceberg

      +tags: ["published"]